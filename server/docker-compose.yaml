version: "2.4"

networks:
  1frontend:
     name: 1frontend
     driver: bridge
     ipam:
      config:
        - subnet: 192.168.100.0/24
          gateway: 192.168.100.1

services:
  traefik:
    image: traefik:latest
    container_name: traefik
    command:
      - --entrypoints.http.address=:80/tcp
      - --entrypoints.https.address=:443/tcp
      - --entrypoints.wireguard.address=:443/udp
      - --providers.docker
      - --api
      - --log=true
      - --log.level=${TRAEFIK_LOG_LEVEL}
      - --certificatesresolvers.leresolver.acme.caserver=https://acme-v02.api.letsencrypt.org/directory
      - --certificatesresolvers.leresolver.acme.email=${TRAEFIK_ACME_MAIL}
      - --certificatesresolvers.leresolver.acme.storage=/acme.json
      - --certificatesresolvers.leresolver.acme.tlschallenge=true
    ports:
      - 80:80/tcp
      - 443:443/tcp
      - 443:443/udp
    networks:
      - 1frontend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /docker/traefik/acme.json:/acme.json
      - /docker/traefik/htpasswd:/.htpasswd
    labels:
      # Dashboard
      - traefik.http.routers.traefik.rule=Host(`${TRAEFIK_DASHBOARD_HOST}`)
      - traefik.http.routers.traefik.service=api@internal
      - traefik.http.routers.traefik.tls.certresolver=leresolver
      - traefik.http.routers.traefik.entrypoints=https
      - traefik.http.routers.traefik.middlewares=authtraefik
      - traefik.http.middlewares.authtraefik.basicauth.usersfile=/.htpasswd
     
      # global redirect to https
      - traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)
      - traefik.http.routers.http-catchall.entrypoints=http
      - traefik.http.routers.http-catchall.middlewares=redirect-to-https

      # middleware redirect
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
      - traefik.docker.network=1frontend

  wireguard:
    container_name: wireguard
    build:
      context: wireguard
      dockerfile: /docker/wireguard/build/Dockerfile
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    networks:
      - 1frontend
    volumes:
      - /docker/wireguard/periodic-config:/etc/periodic
      - /docker/wireguard/wireguard-config:/etc/wireguard
      - /docker/wireguard/bird-config:/etc/bird
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv4.ip_forward=1
      - net.ipv4.tcp_congestion_control=bbr
    labels:
      - traefik.enable=true
      - traefik.udp.routers.wireguard.entrypoints=wireguard
      - traefik.udp.services.wireguard.loadbalancer.server.port=51820
    restart: unless-stopped
    depends_on:
      - traefik

  mtg:
    image: nineseconds/mtg
    container_name: mtg
    networks:
      - 1frontend
    volumes:
      - /docker/mtg/mtg-config/config.toml:/config.toml
    labels:
      - traefik.enable=true
      - traefik.tcp.routers.mtg.entrypoints=https
      - traefik.tcp.routers.mtg.rule=HostSNI(`${MTG_TLS_HOST}`)
      - traefik.tcp.routers.mtg.tls.passthrough=true
      - traefik.tcp.services.mtg.loadbalancer.server.port=3128
    restart: unless-stopped
    depends_on:
      - traefik

  webhost:
    image: nginx
    container_name: webhost
    networks:
      - 1frontend
    volumes:
      - /docker/webhost/html:/usr/share/nginx/html:ro
    labels:
      - traefik.enable=true
      - traefik.http.routers.webhost.entrypoints=https
      - traefik.http.routers.webhost.rule=Host(`${WEBHOST_TLS_HOST}`)
      - traefik.http.routers.webhost.tls=true
      - traefik.http.routers.webhost.tls.certresolver=leresolver
    restart: unless-stopped
    depends_on:
      - traefik
